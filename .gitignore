#include <iostream>
#include <string>
using namespace std;

template <class T>
class Stack
{
private:
    int size,top;
    T* s_ptr;
public:
    Stack();
    ~Stack();
    
    void push(T val);
    T pop();
    bool isempty();
    T get_top();
    void print();
};

template <class T>
Stack<T>::Stack() {
    size = 10;
    top= -1;
    s_ptr = new T[size];
}


template <class T>
Stack<T>::~Stack(){
    
    delete s_ptr;
}

template <class T>
void Stack <T>:: push (T val){
    if (!isempty()) {
        s_ptr[++top]=val;
    }
    else{
        cout << "stack is full" << endl;
    }
}

template <class T>
T Stack<T>::pop(){
    if (!isempty ()){
        
        return s_ptr[top--];
    }
    else{
        
        cout << "Stack is empty " << endl;
    }
};

template <class T>
bool Stack <T> :: isempty(){
    return top =-1;
}

template <class T>
T Stack<T>::get_top(){
    
    return s_ptr[top];
}

template <class T>
void Stack<T>::print(){
    if(isempty()){
        for(int i= top; i >= 0 ; i--){
            cout << s_ptr[i] << endl;
        }
    }
    else{
        cout << "Stack is empty" << endl;
    }
}
